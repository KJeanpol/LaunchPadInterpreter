/*
%{
	#include<stdio.h>
	#include <iostream>
	#include "lex.yy.c"
	#include "../Logic/Procedimiento.h"
	Procedimiento *miProce;
	void setProcedimiento(Procedimiento * p){miProce = p;}
	extern int yylineno;
	int yyerror(const char* s );
	using namespace std;
%}
*/

%{
	#include<stdio.h>
	//#include <iostream>
	#include "lex.yy.c"
	using namespace std;
	extern int yylineno;
	int yyerror(const char* s );
%}

/*------------TOKEN DE MANEJO DE VARIABLES-------*/
%token DEFINIR
%token INCREMENTO
%token DECREMENTO
%token INI_VARIABLE
%token VARIABLE

/*------------TOKEN DE COMENTARIOS-------*/
%token COMENTARIO_I
%token COMENTARIO_F

/*------------TOKEN DE MANEJO DE METODOS DEL ARDUINO-------*/
%token ENCENDER_TODOS
%token APAGAR_TODOS
%token ENCENDER
%token APAGAR
%token ENCENDER_SONIDO
%token APAGAR_SONIDO

/*------------TOKEN DE LOOP-------*/
%token INI_LOOP
%token FIN_LOOP
%token INI_FOR
%token FIN_FOR
%token IN
%token STEP
%token EXIT
%token TIMES
/*------------TOKEN DE SENTENCIA IF-------*/
%token INI_IF
%token FIN_IF
%token ELSE
%token ELSE_IF
%token THEN


/*------------TOKEN DE PROCEDIMIENTOS-------*/
%token DECLARAR_PROCEDIMIENTO
%token INI_PROCEDIMIENTO
%token FIN_PROCEDIMIENTO
%token IGUAL

/*------------TOKENS VARIOS-------*/
%token TIEMPO
%token VTIEMPO
%token PUNTO_COMA
%token CALL
%token PARENTESIS_A
%token PARENTESIS_C
%token COMA
%token NOMBRE


%start PRINCIPIO

%%

	PRINCIPIO: COMENTARIO HOJA_D EXPRESION PROCEDIMIENTO;

	DEFINIR_VAR: DEFINIR VARIABLE VTIEMPO PUNTO_COMA;

	COMENTARIO: COMENTARIO_I NOMBRE COMENTARIO_F COMENTARIO
			  | EPSILON;

	HOJA_D: DEFINIR_VAR HOJA_D
		  | EPSILON;

	EPSILON: ;

	MODIFICAR_VAR: INCREMENTO VARIABLE INCREMENTO PUNTO_COMA
				 | DECREMENTO VARIABLE DECREMENTO PUNTO_COMA
				 | VARIABLE IGUAL PARAMETRO PUNTO_COMA;


	INSTANCIAR_VAR: INI_VARIABLE VARIABLE IGUAL PARAMETRO PUNTO_COMA;

	EXPRESION: EXPRESION_SIMPLE EXPRESION
			 |	EPSILON;

	EXPRESION_SIMPLE: TURNON
			 | TURNOFF
			 | SOUNDON
			 | SOUNDOFF
			 | INSTANCIAR_VAR
			 | DOW_LOOP
			 | FOR_LOOP
			 | IF_SENTENCIA
			 | MODIFICAR_VAR
			 | INVOKE_PROCEDIMIENTO
			 | EXIT PUNTO_COMA;

	TURNON: ENCENDER PARENTESIS_A PARAMETRO COMA PARAMETRO COMA NOMBRE PARENTESIS_C PUNTO_COMA
			| ENCENDER_TODOS PARENTESIS_A PARENTESIS_C PUNTO_COMA;


	TURNOFF: APAGAR_TODOS  PARENTESIS_A PARAMETRO COMA PARAMETRO PARENTESIS_C PUNTO_COMA
		   | APAGAR PARENTESIS_A PARAMETRO COMA PARAMETRO COMA NOMBRE PARENTESIS_C PUNTO_COMA;

	SOUNDON: ENCENDER_SONIDO PARENTESIS_A PARAMETRO PARENTESIS_C PUNTO_COMA;

	SOUNDOFF: APAGAR_SONIDO PARENTESIS_A PARENTESIS_C PUNTO_COMA;


	DOW_LOOP: INI_LOOP VARIABLE IN PARAMETRO STEP PARAMETRO EXPRESION FIN_LOOP PUNTO_COMA;


	FOR_LOOP: INI_FOR PARAMETRO TIMES EXPRESION FIN_FOR PUNTO_COMA;

	IF_SENTENCIA: INI_IF VARIABLE IGUAL PARAMETRO THEN EXPRESION ELSEIF FIN_IF PUNTO_COMA;


	ELSEIF: ELSE_IF VARIABLE IGUAL NOMBRE PUNTO_COMA EXPRESION ELSEIF
		  | ELSEFIN;

	ELSEFIN: ELSE EXPRESION
		   | EPSILON;

	PROCEDIMIENTO: DECLARAR_PROCEDIMIENTO VARIABLE INI_PROCEDIMIENTO EXPRESION DECLARAR_PROCEDIMIENTO VARIABLE FIN_PROCEDIMIENTO PROCEDIMIENTO
			 | EPSILON;

	PARAMETRO: VARIABLE  {printf(yytext);}
			 | TIEMPO {printf(yytext);};

	INVOKE_PROCEDIMIENTO: CALL VARIABLE PUNTO_COMA;

%%
int yyerror(const char* s ) {
	//yyerrok;
	//cout<<yytext<<endl;
	fprintf(stderr,"%s: %s at line %d\n", s, yytext,yylineno);
    	yyclearin;
	return 0;
}